#!/usr/bin/env python3
# music-unrar-py.py

import subprocess
import requests
import difflib
import re
import logging
import sys
from pathlib import Path
from requests.exceptions import RequestException
from subprocess import CalledProcessError

# --- ConfiguraciÃ³n de logging ---
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s %(levelname)s: %(message)s',
    datefmt='%H:%M:%S'
)

EXTRACTOR    = r"C:\Program Files\7-Zip\7z.exe"
AUDIO_EXTS   = {'.mp3', '.flac', '.wav'}
ARCHIVE_EXTS = {'.rar', '.zip'}
HEADERS      = {"User-Agent": "MusicUnrarBot/1.0"}
OUTDIR       = Path("descomprimidos")

def clean_name(filename):
    s = Path(filename).stem
    s = re.sub(r'[_]+', ' ', s)
    s = re.sub(r'\.+', '.', s)
    s = re.sub(r'[\.]+', ' ', s)
    s = re.sub(r'^(\d+[\-\.\s]*)+', '', s)
    s = re.sub(r'\b(by|rip(?:ped)?\s+by)\s+[a-z0-9 ]{2,}$', '', s, flags=re.IGNORECASE)
    s = re.sub(r'\b[a-z0-9.-]+\.(com|net|org|es)\b', '', s, flags=re.IGNORECASE)
    s = re.sub(r'[\[(]por .*?[\])]', '', s, flags=re.IGNORECASE)
    s = re.sub(r'[\[(].*?by .*?[\])]', '', s, flags=re.IGNORECASE)
    s = re.sub(r'\s*-\s*Pg\.?\s*\d+,?$', '', s, flags=re.IGNORECASE)
    s = re.sub(r'[\[\{].*?[\]\}]', '', s)
    s = re.sub(r'\s{2,}', ' ', s)
    s = re.sub(r'[\\/:*?"<>|]', '_', s)
    return s.strip() or Path(filename).stem

def sanitize_folder_name(name):
    return re.sub(r'[\\/:*?"<>|]', '_', name).strip()

def list_tracks_in_archive(archive_path):
    try:
        result = subprocess.run(
            [EXTRACTOR, "l", str(archive_path)],
            capture_output=True, text=True, check=True
        )
    except CalledProcessError as e:
        logging.error(f"No pude listar {archive_path.name}: {e}")
        return 0
    return sum(1 for line in result.stdout.splitlines()
               if any(ext in line.lower() for ext in AUDIO_EXTS))

def similarity(a, b):
    return difflib.SequenceMatcher(None, a.lower(), b.lower()).ratio()

def get_best_metadata(search_query, expected_tracks):
    try:
        resp = requests.get(
            "https://musicbrainz.org/ws/2/release/",
            params={'query': search_query, 'fmt': 'json'},
            headers=HEADERS,
            timeout=10
        )
        resp.raise_for_status()
    except RequestException as e:
        logging.warning(f"MusicBrainz fallo en bÃºsqueda '{search_query}': {e}")
        return None

    for release in resp.json().get("releases", []):
        rid    = release.get("id")
        title  = release.get("title", "")
        artist = release.get("artist-credit", [{}])[0].get("name", "")
        date   = release.get("date", "")[:4] or "????"

        try:
            r = requests.get(
                f"https://musicbrainz.org/ws/2/release/{rid}",
                params={'inc': 'recordings', 'fmt': 'json'},
                headers=HEADERS,
                timeout=10
            )
            r.raise_for_status()
        except RequestException:
            continue

        track_count = sum(len(m.get("tracks", [])) for m in r.json().get("media", []))
        if track_count != expected_tracks:
            continue

        if similarity(title, search_query) > 0.6 or similarity(artist, search_query) > 0.6:
            return f"{artist} - {title} - {date}"
    return None

def extract_archive_to_folder(archive_path, target_folder):
    target_folder.mkdir(parents=True, exist_ok=True)
    subprocess.run([EXTRACTOR, "x", str(archive_path), f"-o{target_folder}", "-y"], check=True)

def main():
    OUTDIR.mkdir(exist_ok=True)
    archives = [f for f in Path(".").iterdir() if f.suffix.lower() in ARCHIVE_EXTS]

    if not archives:
        logging.info("No se encontraron archivos .rar/.zip.")
        return

    errors = []
    unchanged = []

    for archive in archives:
        raw_stem = archive.stem
        try:
            logging.info(f"Procesando: {archive.name}")

            # 1) Nombre limpio
            clean = clean_name(archive.name)

            # 2) Cuenta pistas
            tracks = list_tracks_in_archive(archive)
            logging.info(f"  â†’ {tracks} pistas detectadas")

            # 3) Metadata
            metadata = get_best_metadata(clean, tracks)
            if metadata:
                logging.info(f"  âœ” Metadata encontrada: {metadata}")
                chosen_name = metadata
            else:
                logging.info("  âš  Sin metadata, usando nombre limpio")
                chosen_name = clean

            # Detectar si no se modificÃ³ el nombre
            if chosen_name == raw_stem:
                unchanged.append(archive.name)

            # 4) Extraer
            folder_name = sanitize_folder_name(chosen_name)
            dest = OUTDIR / folder_name
            extract_archive_to_folder(archive, dest)
            logging.info(f"  âœ” ExtraÃ­do en: {dest}")

            # 5) Borrar origen
            archive.unlink()
            logging.info(f"  ðŸ—‘ Archivo eliminado: {archive.name}")

        except Exception as e:
            logging.error(f"âœ– Error procesando {archive.name}: {e}")
            errors.append(archive.name)
            continue

    # Listados finales
    if errors:
        logging.info("Archivos con error:")
        for name in errors:
            logging.info(f"  - {name}")
    else:
        logging.info("No hubo errores.")

    if unchanged:
        logging.info("Archivos sin modificaciÃ³n de nombre:")
        for name in unchanged:
            logging.info(f"  - {name}")
    else:
        logging.info("Todos los archivos tuvieron nombre modificado.")

if __name__ == "__main__":
    try:
        main()
    except Exception as e:
        logging.critical(f"Fatal: {e}")
        sys.exit(1)
